
function d = get_descriptor(image, descriptor_type, step_size)
     % Types = 'dense','RGB_sift', 'rgb_sift', 'Oppsift'

    %% RGB SIFT
    if strcmp(descriptor_type,'RGB_sift')
        d= vl_phow(single(image),'step', step_size , 'color','rgb');
    end
 
    %% rgb SIFT
%     if strcmp(descriptor_type,'rgb_sift')
%         d = [];
%         if size(image,3)==3 % if rgb
%             image_1D = single(rgb2gray(image));
%             %          [f_temp, ~] = vl_dsift(image_1D, 'size', 3) ;
%             [f_temp, ~] = vl_sift(image_1D);
%             %         [f_temp, ~] = vl_phow(image_1D) ;
%             size(f_temp);
%             for j = 1:3 %for each rbg dimentions
%                 [~,d_temp] = vl_sift(single(image(:,:,j)),'frames',f_temp);
%                 d = cat(2,d,d_temp);
%             end
%         else %if not rgb
%             image_1D = single(image);
%             d = vl_sift(image_1D);
%         end 
%     end
    % rgb SIFT
    if strcmp(descriptor_type,'rgb_sift')
        if size(image,3) == 1
            r = image(:,:);
            g = image(:,:);
            b = image(:,:);
        else
            r = image(:,:,1);
            g = image(:,:,2);
            b = image(:,:,3);
        end
        
        [a1,b1] = size(r);
        
        sum = r + g + b;
        r = double(r) ./ double(sum);
        g = double(g) ./ double(sum);
        b = double(b) ./ double(sum);
        
        normImage = zeros(a1, b1, 3 );

        normImage(:,:,1) = r ;
        normImage(:,:,2) = g ;
        normImage(:,:,3) = b ;
        
        normImage = im2single(normImage);
        
        [~ , d1] = vl_sift(normImage(:,:,1));
        [~ , d2] = vl_sift(normImage(:,:,2));
        [~ , d3] = vl_sift(normImage(:,:,3));
        d = [d1';d2';d3'];
        d = d';
        f = 0;
    end


    %% Opponent SIFT
    if strcmp(descriptor_type,'opponent')
        d = vl_phow(single(image),'step', step_size,'color','opponent');
    end
    %% Dense SIFT
    if strcmp(descriptor_type,'dense')
        b = 8 ; %binsize
        m = 3 ;
        if size(image,3) == 3
            image = rgb2gray(image);
        end
        image = im2single(image);
        
        image_smooth = vl_imsmooth(image, sqrt((b/m)^2 - .25));
        
        [f, ~] = vl_dsift(image_smooth, 'step', step_size , 'size', b ) ;
        f(3,:) = b/m ;
        f(4,:) = 0 ;
        
        d = vl_sift(image, 'frames', f);
    end

end